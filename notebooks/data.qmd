---
title: "data processing"
format:
  html:
    code-fold: true
jupyter: python3
---

```{python}
import os
os.chdir("..")
```

```{python}
import polars as pl
from src.data.data_process import cleanData
import ibis 

ibis.options.interactive = True
```

```{python}
d = cleanData()
unique_df = pl.read_excel("data/processed/Query1_hac.xlsx")
# df.filter(df.id.isnull())
d.conn.insert("hactable", unique_df.cast(pl.String))
```
```{python}

# ---------- Master CSV ----------

df = d.conn.table("qcewtable")

df = df.mutate(
  total_employment=(df.first_month_employment.cast("float64") + df.second_month_employment.cast("float64") + df.third_month_employment.cast("float64")
)/3)

df = df.mutate(
  first_4_naics_code=df.naics_code.cast("string").substr(0, 4),
  dummy=ibis.literal(1)
)

# Cast columns to int64 and then group by them
df = (df.mutate(
    #year=df.year.cast("int64"),
    qtr=df.qtr.cast("int64"),
    first_4_naics_code=df.first_4_naics_code.cast("int64"),
    total_wages=df.total_wages.cast("int64")  
)
.order_by("year")
)


# Group by the specified columns and aggregate
df = (
  df.group_by(["year", "qtr", "first_4_naics_code"]).aggregate(
  total_wages_sum=df.total_wages.sum(),
  total_employment_sum=df.total_employment.sum(),
  dummy_sum=df.dummy.sum()
  )
  .order_by("year")
)

df = df.filter(df["dummy_sum"] > 4)

# Step 2: Add calculated columns for contributions
df = df.mutate(
  fondo_contributions=df["total_wages_sum"] * 0.014,
  medicare_contributions=df["total_wages_sum"] * 0.0145,
  ssn_contributions=df["total_wages_sum"] * 0.062
)

df_qcew = df
df_qcew
```

```{python}

# ---------- Unique EXCEL ----------

# Load the data
df = d.conn.table("hactable")

df = df.mutate(
  first_4_naics_code=df.NAICS_R02.substr(0, 4)
)

df = df.mutate(
  first_4_naics_code=(df.first_4_naics_code.cast("int64"))
)
df2 = df.join(
  df_qcew, predicates=("first_4_naics_code")

)



df2
```
